name: Deploy on push to deploy branch

on:
  push:
    branches:
      - deploy

env:
  DOCKER_IMAGE_API: asolheiro/ob-backend
  DOCKER_IMAGE_SCHEMA_DB: asolheiro/ob-db
  NODE_ENV: production

jobs:
  build-and-push:
    name: Build and push Docker images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Node.js API image
        run: |
          git clone https://github.com/asolheiro-ezops/rest-api-ezops-test ./rest-api-ezops-test
          docker buildx build -t $DOCKER_IMAGE_API:latest ./rest-api-ezops-test
          docker push $DOCKER_IMAGE_API:latest

  build-and-push-db-schema:
    name: Build and push Docker image to init db
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Database Schema Creator
        run: |
          git clone https://github.com/asolheiro-ezops/rest-api-ezops-test
          cd ./rest-api-ezops-test/database

          docker buildx build -t $DOCKER_IMAGE_SCHEMA_DB:latest .
          docker push $DOCKER_IMAGE_SCHEMA_DB:latest

  deploy-api:
    name: Deploy API to ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service with new task definition
        run: |
          CLUSTER_NAME="${{ secrets.ECS_CLUSTER_NAME }}"
          SERVICE_NAME="${{ secrets.ECS_SERVICE_NAME }}"
          IMAGE_URI="${{ env.DOCKER_IMAGE_API }}:latest"

          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].taskDefinition" --output text)

          aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query "taskDefinition" > task-def.json

          jq --arg IMAGE "$IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-def.json > new-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)

          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN
